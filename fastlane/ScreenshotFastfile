# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# WordPress (Base)
RAW_SCREENSHOTS_DIR = File.join(Dir.pwd, "screenshots", "raw")
RAW_SCREENSHOTS_PROCESSING_DIR = File.join(Dir.pwd, "screenshots", "raw_tmp")
PROMO_SCREENSHOTS_PROCESSING_DIR = File.join(Dir.pwd, "screenshots", "promo_tmp")
FINAL_METADATA_DIR = File.join(Dir.pwd, "metadata/android")
SCREENSHOTS_CONFIG_FILE = File.join(Dir.pwd, "screenshots.json")

# Jetpack: Append _jetpack to existing directories
JETPACK_RAW_SCREENSHOTS_DIR = File.join(Dir.pwd, "screenshots", "raw_jetpack")
JETPACK_RAW_SCREENSHOTS_PROCESSING_DIR = File.join(Dir.pwd, "screenshots", "raw_tmp_jetpack")
JETPACK_PROMO_SCREENSHOTS_PROCESSING_DIR = File.join(Dir.pwd, "screenshots", "promo_tmp_jetpack")
JETPACK_FINAL_METADATA_DIR = File.join(Dir.pwd, "jetpack_metadata/android")
JETPACK_SCREENSHOTS_CONFIG_FILE = File.join(Dir.pwd, "jetpack-screenshots.json")

default_platform(:android)
app_name = "wordpress"

platform :android do

########################################################################
# Before each lane, set the app name by extracting it from the options
########################################################################
before_all do |lane, options|
  app_name = extract_app_name(app: options[:app])
  puts "Lane :#{lane} starting for #{app_name}"
end

########################################################################
# Sreenshot Lanes
########################################################################
  #####################################################################################
  # screenshots
  # -----------------------------------------------------------------------------------
  # This lane takes screenshots for the WordPress app across the three device types:
  # phone, sevenInch and tenInch. If device serials are not provided these avds will be
  # used: fastlane_screenshots_phone, fastlane_screenshots_seven_inch,
  # fastlane_screenshots_ten_inch
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane screenshots phone_serial:<serial> sevenInch_serial:<serial> tenInch_serial:<serial>
  #
  # Example:
  # fastlane screenshots
  # fastlane screenshots phone_serial:emulator-5444 sevenInch_serial:emulator-5446 tenInch_serial:emulator-5448
  #####################################################################################
  desc "Build and capture screenshots"
  lane :screenshots do |options|

  gradle(task: "assemble#{app_name}VanillaDebug assemble#{app_name}VanillaDebugAndroidTest")
  take_screenshots(options)
  end

  desc "Capture screenshots"
  lane :take_screenshots do |options|
  	rebuild_screenshot_devices

    # If you update this, be sure to also update the `rebuild_screenshot_devices` lane down below as well as the corresponding `fastlane/emulators/*.ini` config files.
    # You might also want to mirror the changes of emulators used here with the ones used on Firebase Test Lab (when running on CI via `trigger_screenshots` lane),
    # by updating the 2 places in the `raw-screenshots` job of `.circleci/config.yml` mentioning the devices used by FTL for screenshots
    screenshot_devices = [
              {
                   screenshot_type: 'phone',
                   device_name: 'Pixel_3_API_28',
                   device_serial: options[:phone_serial],
              },
              {
                   screenshot_type: 'tenInch',
                   device_name: 'Nexus_9_API_28',
                   device_serial: options[:tenInch_serial],
                }
    ]

    # By default, clear previous screenshots
    should_clear_previous_screenshots = true

    # Allow creating screenshots for just one device type
    if options[:device] != nil
      screenshot_devices.keep_if { |device|
        device[:screenshot_type].casecmp(options[:device]) == 0
      }

      # Don't clear, because we might just be fixing one device type
      should_clear_previous_screenshots = false
    end

    locales = ALL_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map { |hsh| hsh[:google_play] }
      .compact

    # Allow creating screenshots for just one locale
    if options[:locale] != nil
      locales.keep_if { |locale|
        locale.casecmp(options[:locale]) == 0
      }

      # Don't clear, because we might just be fixing one locale
      should_clear_previous_screenshots = false
    end

    # Set screenshot options for jetpack or other, this could have been inlined with ? :,
    # but is more readable separated out.
    if app_name.casecmp('jetpack') == 0
        raw_screenshots_dir = JETPACK_RAW_SCREENSHOTS_DIR
        use_tests_in_classes = "org.wordpress.android.ui.screenshots.JPScreenshotTest"
        package_name = "com.jetpack.android"
    else
        raw_screenshots_dir = RAW_SCREENSHOTS_DIR
        use_tests_in_classes = "org.wordpress.android.ui.screenshots.WPScreenshotTest"
        package_name = "org.wordpress.android"
    end

    # These values are passed to take_android_screenshots.rb and ultimately handed over to runner.rb
    # app_package_name needs to be explicitly set (jetpack and WP have different package names)
    screenshot_options = {
          output_directory: raw_screenshots_dir,
          app_apk_path: "WordPress/build/outputs/apk/#{app_name}Vanilla/debug/org.wordpress.android-#{app_name}-vanilla-debug.apk",
          tests_apk_path: "WordPress/build/outputs/apk/androidTest/#{app_name}Vanilla/debug/org.wordpress.android-#{app_name}-vanilla-debug-androidTest.apk",
          use_tests_in_classes: use_tests_in_classes,
          reinstall_app: false,
          clear_previous_screenshots: should_clear_previous_screenshots,
          locales: locales,
          test_instrumentation_runner: "org.wordpress.android.WordPressTestRunner",
          use_adb_root: true,
          app_package_name: package_name
    }

    take_android_emulator_screenshots(devices: screenshot_devices, screenshot_options: screenshot_options)
  end

  #####################################################################################
  # download_promo_strings
  # -----------------------------------------------------------------------------------
  # This lane download the translated promo strings from the translation system
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_promo_strings
  #
  # Example:
  # fastlane download_promo_strings
  #####################################################################################
  desc "Downloads translated promo strings from the translation system"
  lane :download_promo_strings do |options|

    if app_name.casecmp('jetpack') == 0
            files = {
              "play_store_screenshot_1" => {desc: "jetpack_play_store_screenshot_1.txt"},
              "play_store_screenshot_2" => {desc: "jetpack_play_store_screenshot_2.txt"},
              "play_store_screenshot_3" => {desc: "jetpack_play_store_screenshot_3.txt"},
              "play_store_screenshot_4" => {desc: "jetpack_play_store_screenshot_4.txt"},
              "play_store_screenshot_5" => {desc: "jetpack_play_store_screenshot_5.txt"},
              "play_store_screenshot_6" => {desc: "jetpack_play_store_splash_1.txt"},
            }
      else
        files = {
              "play_store_screenshot_1" => {desc: "play_store_screenshot_1.txt"},
              "play_store_screenshot_2" => {desc: "play_store_screenshot_2.txt"},
              "play_store_screenshot_3" => {desc: "play_store_screenshot_3.txt"},
              "play_store_screenshot_4" => {desc: "play_store_screenshot_4.txt"},
              "play_store_screenshot_5" => {desc: "play_store_screenshot_5.txt"},
              "play_store_screenshot_6" => {desc: "play_store_screenshot_6.txt"},
              "play_store_screenshot_7" => {desc: "play_store_screenshot_7.txt"},

              "enhanced_app_store_screenshot_1" => {desc: "play_store_screenshot_1.html"},
              "enhanced_app_store_screenshot_2" => {desc: "play_store_screenshot_2.html"},
              "enhanced_app_store_screenshot_3" => {desc: "play_store_screenshot_3.html"},
              "enhanced_app_store_screenshot_4" => {desc: "play_store_screenshot_4.html"},
              "enhanced_app_store_screenshot_5" => {desc: "play_store_screenshot_5.html"},
              "enhanced_app_store_screenshot_6" => {desc: "play_store_screenshot_6.html"},
              "enhanced_app_store_screenshot_7" => {desc: "play_store_screenshot_7.html"},
            }
    end

    locales = ALL_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]}

    if app_name.casecmp('jetpack') == 0
        project_url = "https://translate.wordpress.com/projects/jetpack/apps/android/release-notes/"
    else
        project_url = "https://translate.wordpress.org/projects/apps/android/release-notes/"
    end

    gp_downloadmetadata(project_url: project_url,
      target_files: files,
      locales: locales,
      source_locale: "en-US",
      download_path: File.join(Dir.pwd, "/playstoreres/metadata"))
  end


  #####################################################################################
  # trigger_screenshots
  # -----------------------------------------------------------------------------------
  # This lane triggers a CircleCI workflow on demand to generate Raw and Promo screenshots
  # -----------------------------------------------------------------------------------
  # Usage:
  #   bundle exec fastlane trigger_screenshots [token:<circleci_token>] [fork:<github_fork_name>] [branch:<git_branch>
  # Notes:
  #   - The CircleCI token can be passed via the CIRCLECI_TOKEN env var instead of as a parameter to the lane call
  #   - The fork parameter allows us to trigger a build on a fork of WPAndroid instead of the default repo on `wordpress-mobile` org.
  #####################################################################################
  lane :trigger_screenshots do |options|
    new_options = options.merge({ parameters: { "generate_screenshots": true } })
    trigger_ci(new_options)
  end


  #####################################################################################
  # download_raw_screenshots
  # -----------------------------------------------------------------------------------
  # This lane downloads the raw screenshots generated by a Firebase Test Lab run.
  # Typically called by CI at the end of the workflow triggered by trigger_screenshots
  # -----------------------------------------------------------------------------------
  # Usage:
  #   fastlane download_raw_screenshots bucket:<gs-url> phone:<model-version> tenInch:<model-version>
  #
  # Example:
  #   fastlane download_raw_screenshots bucket:"gs://test-lab-some-id/yyyy-MM-dd_hh:mm:ss.fff_xyzt/" phone:blueline-28 tenInch:gts3lltevzw-28
  #
  # Notes:
  #   Screenshots generated by Firebase Test Lab are in JPG and have a long prefix in their basename. Those will automatically
  #   be converted to PNG and the long prefix will get removed when they get processed by `create_promo_screenshots` though.
  #####################################################################################
  desc "Download raw screenshots from Firebase Test Lab / Google Storage"
  lane :download_raw_screenshots do |options|
    folder_mapping = { options[:phone] => 'phoneScreenshots', options[:tenInch] => 'tenInchScreenshots' }

    if app_name.casecmp('jetpack') == 0
        raw_screenshots_dir = JETPACK_RAW_SCREENSHOTS_DIR
    else
        raw_screenshots_dir = RAW_SCREENSHOTS_DIR
    end

    FileUtils.rm_rf(raw_screenshots_dir)
    FileUtils.mkdir_p(raw_screenshots_dir)

    bucket_url = options[:bucket]
    device_dirs = `gsutil ls "#{bucket_url}"`
      .split("\n")
      .filter { |f| f.end_with?('/') }
      .sort

    gsutil_cp = ["gsutil", (is_ci? ? '-m' : nil), "cp", "-cU"].compact
    device_dirs.each do |device_dir|
      parts = File.basename(device_dir).split('-') # "model-api-locale-orientation[_rerunN]"
      model_and_api = parts[0..1].join('-')
      subdir = folder_mapping[model_and_api]
      next if subdir.nil?
      locale = parts[2].gsub('_','-')
      dest = File.join( raw_screenshots_dir, locale, 'images', subdir )
      FileUtils.mkdir_p(dest)
      sh( *gsutil_cp, File.join(device_dir, "artifacts/*.jpg"), dest ) do |ok, res|
        UI.error("Failed to download artifacts for #{subdir} (status: #{res.exitstatus})") unless ok
      end
    end
  end


  #####################################################################################
  # create_promo_screenshots
  # -----------------------------------------------------------------------------------
  # This lane creates the promo screenshot from the original ones that
  # are taken by the screenshot lane
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane create_promo_screenshots
  #
  # Example:
  # fastlane create_promo_screenshots app:<app name> locale:<en_US>
  #####################################################################################
  desc "Creates promo screenshots"
  lane :create_promo_screenshots do |options|
    begin
      require 'rmagick'
    rescue LoadError => e
      UI.user_error!("The rmagick gem doesn't seem to be installed. Be sure to use `bundle install --with screenshots`.")
    end

    if app_name.casecmp('jetpack') == 0
      promo_screenshots_processing_dir = JETPACK_PROMO_SCREENSHOTS_PROCESSING_DIR
      raw_screenshots_dir = JETPACK_RAW_SCREENSHOTS_DIR
      raw_screenshots_processing_dir = JETPACK_RAW_SCREENSHOTS_PROCESSING_DIR
      new_filename = 'org.wordpress.android.ui.screenshots.JPScreenshotTest-jPScreenshotTest-'
      final_metadata_dir = JETPACK_FINAL_METADATA_DIR
    else
      promo_screenshots_processing_dir = PROMO_SCREENSHOTS_PROCESSING_DIR
      raw_screenshots_dir = RAW_SCREENSHOTS_DIR
      raw_screenshots_processing_dir = RAW_SCREENSHOTS_PROCESSING_DIR
      new_filename = 'org.wordpress.android.ui.screenshots.WPScreenshotTest-wPScreenshotTest-'
      final_metadata_dir = FINAL_METADATA_DIR
    end

  puts "promo_screenshots_processing_dir #{promo_screenshots_processing_dir}"
  puts "raw_screenshots_dir dir #{raw_screenshots_dir}"
  puts "raw_screenshots_processing_dir #{raw_screenshots_processing_dir}"
  puts "new_filename #{new_filename}"
  puts "final_metadata_dir #{final_metadata_dir}"

    # Clean temporary folder from previous runs
    FileUtils.rm_rf(promo_screenshots_processing_dir)

    # Create a copy of the files to work with – this ensures that if we're doing multiple
    # screenshot generation tasks close together, we can keep reusing the same source files
    FileUtils.rm_rf(raw_screenshots_processing_dir)
    FileUtils.copy_entry(raw_screenshots_dir, raw_screenshots_processing_dir)

    # For JPG files generated by Firebase Test Lab: Convert them to PNG and get rid of long prefix in name
    Dir.glob(raw_screenshots_processing_dir + "/**/*.jpg").each do |jpg_path|
      # Remove long package prefix + digit suffix inserted by FTL in screenshot file names...
      new_filename = File.basename(jpg_path, '.jpg')
      new_filename.gsub!(new_filename, '')
      new_filename.gsub!(/-[0-9]+$/, '')
      new_filename += '.png'
      png_path = File.join( File.dirname(jpg_path), new_filename )
      # Convert to PNG
      UI.message("Converting JPG to PNG: #{png_path}...")
      image = Magick::Image.read(jpg_path).first
      image.format = "PNG"
      image.write(png_path)
      FileUtils.rm(jpg_path)
    end

    # For PNG files generated via screengrab: Remove the timestamps from filenames to make them easier to work with
    Dir.glob(raw_screenshots_dir + "/**/*.png").each do |entry|
      ext = File.extname(entry)
      newfilename = File.dirname(entry) + "/" + File.basename(entry, ext).split("_")[0] + ext
      File.rename( entry, newfilename.downcase )
    end

    locales = ALL_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map { |hsh| hsh[:google_play] }
      .compact

    # Allow creating promo screenshots for just one locale
    # undefined method `casecmp' for nil:NilClass (NoMethodError) may be thrown
    # because locales contains a NIL value?
    if options[:locale] != nil
      locales.keep_if { |locale|
        locale.casecmp(options[:locale]) == 0
      }
    end

    # Remove locales we're not interested in
    Pathname(raw_screenshots_dir)
        .children
        .select(&:directory?)
        .reject { |dir| locales.include? File.basename(dir) }
        .each do |dir|
          FileUtils.rm_rf(dir)
        end

    # Run screenshots generator tool
    # Add the path to the screenshots.json file so that it can be processed correctly downstream
    promo_screenshots(
      orig_folder: raw_screenshots_dir,
      metadata_folder: final_metadata_dir,
      output_folder: promo_screenshots_processing_dir,
      force: options[:force],
      config_file: app_name.casecmp('jetpack') == 0 ? JETPACK_SCREENSHOTS_CONFIG_FILE : SCREENSHOTS_CONFIG_FILE
    )

    # Remove old screenshots from final_metadata_dir subfolders of the targeted locales
    UI.message("Cleaning old promo screenshots from #{final_metadata_dir} for #{locales.count} selected locales...")
    locales.each do |locale|
      screenshot_files = Dir.glob("#{final_metadata_dir}/#{locale}/images/*/*.png")
      FileUtils.rm( screenshot_files )
    end

    # Finally move generated screenshots from promo_screenshots_processing_dir to final_metadata_dir subfolders
    relative_paths = Dir.chdir(promo_screenshots_processing_dir) { Dir.glob("*/images/*/*.png") }
    UI.message("Moving #{relative_paths.count} new promo screenshots to #{final_metadata_dir}...")
    relative_paths.each do |entry|
      old_path = File.join( promo_screenshots_processing_dir, entry )
      new_path = File.join( final_metadata_dir, entry )
      FileUtils.mkdir_p( File.dirname(new_path) )
      File.rename( old_path, new_path )
    end

    # Clean up the temp directories
    FileUtils.rm_rf(raw_screenshots_dir)
    FileUtils.rm_rf(promo_screenshots_processing_dir)
  end


  #####################################################################################
  # rebuild_screenshot_devices
  # -----------------------------------------------------------------------------------
  # This lane rebuilds all of the emulators used for generating screenshots. Beware – running
  # this action will overwrite the following emulators:
  #     - Nexus 9 API 28
  #     - Pixel 2 XL API 28
  # It will not overwrite any other devices.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane rebuild_screenshot_devices
  #
  # Example:
  # fastlane rebuild_screenshot_devices
  #####################################################################################
  desc "Rebuild screenshot devices"
  lane :rebuild_screenshot_devices do |options|

    emulators = [
        Dir.pwd + "/emulators/Pixel_3_API_28.ini",
        Dir.pwd + "/emulators/Nexus_9_API_28.ini"
    ]

    emulators.each do |emulator_configuration|
        sh("helpers/copy-device.sh '#{emulator_configuration}'")
    end
  end

  #####################################################################################
  # extract_app_name
  # -----------------------------------------------------------------------------------
  # This lane extracts the app_name from option[:app]. If no option[:app] is
  # specified, it is defaulted to wordpress
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane extract_app_name app:<app_name>
  #
  # Example:
  # fastlane extract_app_name app:jetpack
  #####################################################################################
  desc "Extract app name from options"
  lane :extract_app_name do |options|

  extracted_app_name = "wordpress"
      if options[:app] != nil
        if options[:app].casecmp('jetpack') == 0
            extracted_app_name = options[:app].downcase
       end
      end
      extracted_app_name
  end
end
